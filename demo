import { useEffect, useMemo, useState } from 'react'
import { Link, useNavigate, useParams } from 'react-router-dom'
import { loadCustomers, saveCustomers, nextId } from '../utils/storage.js'

const empty = { firstName:'', lastName:'', email:'', phone:'' }

export default function CustomerForm(){
  const navigate = useNavigate()
  const { id } = useParams()
  const isEdit = Boolean(id)
  const all = useMemo(()=>loadCustomers(), [])
  const existing = isEdit ? all.find(c=>c.id===Number(id)) : null

  const [form, setForm] = useState(existing || empty)
  const [errors, setErrors] = useState({})

  useEffect(()=>{
    if(isEdit && !existing){
      alert('Customer not found'); 
      navigate('/customers')
    }
  }, [isEdit, existing, navigate])

  function validate(values){
    const e = {}
    if(!values.firstName.trim()) e.firstName = 'First name is required'
    if(!values.lastName.trim()) e.lastName = 'Last name is required'
    if(!values.email.trim()) e.email = 'Email is required'
    else if(!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(values.email)) e.email = 'Enter a valid email'
    if(values.phone && !/^[0-9+\-\s]{6,15}$/.test(values.phone)) e.phone = 'Invalid phone'
    return e
  }

  function onChange(e){
    const { name, value } = e.target
    setForm(prev=>({ ...prev, [name]: value }))
  }

  function onSubmit(e){
    e.preventDefault()
    const eMap = validate(form)
    setErrors(eMap)
    if(Object.keys(eMap).length) return

    const list = loadCustomers()
    if(isEdit){
      const updated = list.map(c => c.id===existing.id ? { ...existing, ...form } : c)
      saveCustomers(updated)
    }else{
      const newCustomer = { ...form, id: nextId(list), accounts: [] }
      saveCustomers([...list, newCustomer])
    }
    navigate('/customers')
  }

  return (
    <div className="card">
      <div className="breadcrumb">
        <Link to="/customers">&lt; Back to Customers List</Link>
      </div>

      <h3 style={{marginTop:0}}>{isEdit ? 'Edit Customer' : 'Add Customer'}</h3>

      <form onSubmit={onSubmit} noValidate>
        <div className="field">
          <label>First Name</label>
          <input name="firstName" value={form.firstName} onChange={onChange} placeholder="Please enter first name"/>
          {errors.firstName && <div className="error">{errors.firstName}</div>}
        </div>

        <div className="field">
          <label>Last Name</label>
          <input name="lastName" value={form.lastName} onChange={onChange} placeholder="Please enter last name"/>
          {errors.lastName && <div className="error">{errors.lastName}</div>}
        </div>

        <div className="field">
          <label>Email</label>
          <input name="email" value={form.email} onChange={onChange} placeholder="Please enter email details"/>
          {errors.email && <div className="error">{errors.email}</div>}
        </div>

        <div className="field">
          <label>Phone</label>
          <input name="phone" value={form.phone} onChange={onChange} placeholder="Please enter phone no"/>
          {errors.phone && <div className="error">{errors.phone}</div>}
        </div>

        <div className="actions">
          <button className="btn primary" type="submit">{isEdit ? 'Update Customer' : 'Create Customer'}</button>
          <Link className="btn" to="/customers">Cancel</Link>
        </div>
      </form>
    </div>
  )
}