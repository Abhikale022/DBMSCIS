import java.util.Scanner;
import java.util.Random;

// ===== Custom Exceptions =====
class InvalidNameException extends Exception {
    public InvalidNameException(String message) {
        super(message);
    }
}

class InvalidEmailException extends Exception {
    public InvalidEmailException(String message) {
        super(message);
    }
}

class InvalidContactException extends Exception {
    public InvalidContactException(String message) {
        super(message);
    }
}

class InvalidAccountTypeException extends Exception {
    public InvalidAccountTypeException(String message) {
        super(message);
    }
}

class InvalidCustomerIdException extends Exception {
    public InvalidCustomerIdException(String message) {
        super(message);
    }
}

// ===== Customer Class =====
class Customer {
    int customerId;
    String name;
    String email;
    String contact;
    String accountType;

    public Customer(String name, String email, String contact, String accountType) {
        Random rand = new Random();
        this.customerId = rand.nextInt(9000) + 1000;
        this.name = name;
        this.email = email;
        this.contact = contact;
        this.accountType = accountType;
    }

    @Override
    public String toString() {
        return "Customer Id = " + customerId +
                ", Customer name = " + name +
                ", Customer email = " + email +
                ", Customer contact = " + contact +
                ", Account type = " + accountType;
    }
}

// ===== Bank Application =====
public class BankApplication {
    static Customer[] customers = new Customer[100];
    static int count = 0;
    static Scanner sc = new Scanner(System.in);

    // === Validation Methods ===
    public static void validateName(String name) throws InvalidNameException {
        if (!name.matches("[a-zA-Z ]+")) {
            throw new InvalidNameException("Name can only have alphabets");
        }
    }

    public static void validateEmail(String email) throws InvalidEmailException {
        if (!email.matches("^[\\w-\\.]+@[\\w-]+\\.[a-z]{2,4}$")) {
            throw new InvalidEmailException("Invalid email format");
        }
    }

    public static void validateContact(String contact) throws InvalidContactException {
        if (!contact.matches("\\d{10}")) {
            throw new InvalidContactException("Contact number must have exactly 10 digits");
        }
    }

    public static void validateAccountType(String accountType) throws InvalidAccountTypeException {
        if (!(accountType.equalsIgnoreCase("Savings") || accountType.equalsIgnoreCase("Current"))) {
            throw new InvalidAccountTypeException("Account type must be either Savings or Current");
        }
    }

    // === Add Customer ===
    public static void addCustomer() {
        try {
            if (count >= customers.length) {
                System.out.println("Customer list is full.");
                return;
            }

            System.out.println("Please enter customer details :");
            System.out.print("Enter name : ");
            String name = sc.nextLine();
            validateName(name);

            System.out.print("Enter email : ");
            String email = sc.nextLine();
            validateEmail(email);

            System.out.print("Enter contact : ");
            String contact = sc.nextLine();
            validateContact(contact);

            System.out.print("Enter account type (Savings or Current): ");
            String accountType = sc.nextLine();
            validateAccountType(accountType);

            Customer c = new Customer(name, email, contact, accountType);
            customers[count++] = c;
            System.out.println("Customer added successfully with customer id " + c.customerId);

        } catch (InvalidNameException | InvalidEmailException | InvalidContactException | InvalidAccountTypeException e) {
            System.out.println(e.getMessage());
        }
    }

    // === Display Customers ===
    public static void displayCustomers() {
        if (count == 0) {
            System.out.println("No customers found.");
        } else {
            for (int i = 0; i < count; i++) {
                System.out.println(customers[i]);
            }
        }
    }

    // === Search Customer ===
    public static void searchCustomer() {
        try {
            System.out.print("Please enter customer id : ");
            String input = sc.nextLine();

            if (!input.matches("\\d+")) {
                throw new InvalidCustomerIdException("Customer ID must be an integer");
            }

            int id = Integer.parseInt(input);
            boolean found = false;

            for (int i = 0; i < count; i++) {
                if (customers[i].customerId == id) {
                    System.out.println(customers[i]);
                    found = true;
                    break;
                }
            }
            if (!found) {
                System.out.println("Customer not found.");
            }
        } catch (InvalidCustomerIdException e) {
            System.out.println(e.getMessage());
        }
    }

    // === Delete Customer ===
    public static void deleteCustomer() {
        System.out.print("Please enter customer id to delete: ");
        int id = sc.nextInt();
        sc.nextLine();

        boolean deleted = false;
        for (int i = 0; i < count; i++) {
            if (customers[i].customerId == id) {
                for (int j = i; j < count - 1; j++) {
                    customers[j] = customers[j + 1];
                }
                customers[--count] = null;
                deleted = true;
                System.out.println("Customer deleted successfully.");
                break;
            }
        }
        if (!deleted) {
            System.out.println("Customer not found.");
        }
    }

    public static void main(String[] args) {
        int choice;
        do {
            System.out.println("\nWelcome to Standard Chartered Bank");
            System.out.println("Please enter your choice");
            System.out.println("1 for Add new Customer");
            System.out.println("2 for Display Customers");
            System.out.println("3 for Search Customer");
            System.out.println("4 for Delete Customer");
            System.out.println("5 for Exit the bank application");

            choice = sc.nextInt();
            sc.nextLine();

            switch (choice) {
                case 1 -> addCustomer();
                case 2 -> displayCustomers();
                case 3 -> searchCustomer();
                case 4 -> deleteCustomer();
                case 5 -> System.out.println("Exiting application...");
                default -> System.out.println("Invalid choice. Please try again.");
            }
        } while (choice != 5);
    }
}